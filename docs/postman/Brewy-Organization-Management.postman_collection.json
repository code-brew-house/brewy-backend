{
  "info": {
    "name": "Brewy Backend API Collection",
    "description": "Complete API collection for Brewy backend services including authentication, organization management, storage operations, audio analysis, user management, and health checks. Features global JWT token management and comprehensive endpoint coverage.",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.environment.get('base_url')) {",
          "    pm.environment.set('base_url', 'http://localhost:3000');",
          "}",
          "",
          "// Global token management",
          "// Check if we have a valid JWT token for authenticated requests",
          "const requestName = pm.info.requestName;",
          "const isAuthRequired = !['Health Check', 'Hello World'].includes(requestName);",
          "",
          "if (isAuthRequired) {",
          "    const jwtToken = pm.environment.get('jwt_token');",
          "    ",
          "    if (!jwtToken) {",
          "        console.log('‚ö†Ô∏è No JWT token found. Please run authentication endpoints first.');",
          "    } else {",
          "        // Check if token is expired (basic check)",
          "        try {",
          "            const tokenParts = jwtToken.split('.');",
          "            if (tokenParts.length === 3) {",
          "                const payload = JSON.parse(atob(tokenParts[1]));",
          "                const currentTime = Math.floor(Date.now() / 1000);",
          "                ",
          "                if (payload.exp && payload.exp < currentTime) {",
          "                    console.log('‚ö†Ô∏è JWT token has expired. Please re-authenticate.');",
          "                    pm.environment.unset('jwt_token');",
          "                }",
          "            }",
          "        } catch (e) {",
          "            console.log('‚ö†Ô∏è Invalid JWT token format.');",
          "        }",
          "    }",
          "}",
          "",
          "// Log current request info for debugging",
          "console.log(`üöÄ Making request to: ${pm.request.url}`);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global response logging and error handling",
          "console.log(`‚úÖ Response status: ${pm.response.status} ${pm.response.reason()}`);",
          "",
          "// Handle common error responses",
          "if (pm.response.code === 401) {",
          "    console.log('üîí Authentication required. Token may be invalid or expired.');",
          "} else if (pm.response.code === 403) {",
          "    console.log('üö´ Access forbidden. Check user permissions.');",
          "} else if (pm.response.code === 404) {",
          "    console.log('üîç Resource not found.');",
          "} else if (pm.response.code >= 400) {",
          "    console.log('‚ùå Request failed with error:', pm.response.text());",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "organization_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register Super Owner",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.accessToken).to.be.a('string');",
                  "    pm.environment.set('jwt_token', jsonData.accessToken);",
                  "    pm.environment.set('super_owner_token', jsonData.accessToken);",
                  "});",
                  "",
                  "pm.test('User has super owner role', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user).to.have.property('role', 'SUPER_OWNER');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"superowner\",\n  \"email\": \"superowner@brewy.com\",\n  \"password\": \"SuperOwner123!\",\n  \"fullName\": \"Super Owner User\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Login Super Owner",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.accessToken).to.be.a('string');",
                  "    pm.environment.set('jwt_token', jsonData.accessToken);",
                  "    pm.environment.set('super_owner_token', jsonData.accessToken);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"identifier\": \"superowner@brewy.com\",\n  \"password\": \"SuperOwner123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "Organization CRUD",
      "item": [
        {
          "name": "Create Organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has organization ID', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.be.a('string');",
                  "    pm.environment.set('organization_id', jsonData.id);",
                  "});",
                  "",
                  "pm.test('Organization has correct properties', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name', 'Tech Solutions Inc');",
                  "    pm.expect(jsonData).to.have.property('email', 'contact@techsolutions.com');",
                  "    pm.expect(jsonData).to.have.property('contactNumber', '+1-555-123-4567');",
                  "    pm.expect(jsonData).to.have.property('totalMemberCount', 0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Tech Solutions Inc\",\n  \"email\": \"contact@techsolutions.com\",\n  \"contactNumber\": \"+1-555-123-4567\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/organizations",
              "host": ["{{base_url}}"],
              "path": ["organizations"]
            }
          }
        },
        {
          "name": "Get All Organizations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Organizations have required properties', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "        pm.expect(jsonData[0]).to.have.property('email');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/organizations",
              "host": ["{{base_url}}"],
              "path": ["organizations"]
            }
          }
        },
        {
          "name": "Get Organization by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Organization has correct ID', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.equal(pm.environment.get('organization_id'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/organizations/{{organization_id}}",
              "host": ["{{base_url}}"],
              "path": ["organizations", "{{organization_id}}"]
            }
          }
        },
        {
          "name": "Update Organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Organization name was updated', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.equal('Tech Solutions LLC');",
                  "});",
                  "",
                  "pm.test('Contact number was updated', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.contactNumber).to.equal('+1-555-123-9999');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Tech Solutions LLC\",\n  \"contactNumber\": \"+1-555-123-9999\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/organizations/{{organization_id}}",
              "host": ["{{base_url}}"],
              "path": ["organizations", "{{organization_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Add Owner to Organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('User has correct role', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.role).to.equal('OWNER');",
                  "    pm.environment.set('user_id', jsonData.id);",
                  "});",
                  "",
                  "pm.test('User belongs to organization', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.organizationId).to.equal(pm.environment.get('organization_id'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{super_owner_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@techsolutions.com\",\n  \"password\": \"SecurePassword123!\",\n  \"fullName\": \"John Doe\",\n  \"role\": \"OWNER\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/organizations/{{organization_id}}/users",
              "host": ["{{base_url}}"],
              "path": ["organizations", "{{organization_id}}", "users"]
            }
          }
        },
        {
          "name": "Add Admin to Organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('User has correct role', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.role).to.equal('ADMIN');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{super_owner_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"janedoe\",\n  \"email\": \"jane.doe@techsolutions.com\",\n  \"password\": \"AdminPassword123!\",\n  \"fullName\": \"Jane Doe\",\n  \"role\": \"ADMIN\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/organizations/{{organization_id}}/users",
              "host": ["{{base_url}}"],
              "path": ["organizations", "{{organization_id}}", "users"]
            }
          }
        },
        {
          "name": "Add Agent to Organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('User has correct role', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.role).to.equal('AGENT');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{super_owner_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"bobsmith\",\n  \"email\": \"bob.smith@techsolutions.com\",\n  \"password\": \"AgentPassword123!\",\n  \"fullName\": \"Bob Smith\",\n  \"role\": \"AGENT\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/organizations/{{organization_id}}/users",
              "host": ["{{base_url}}"],
              "path": ["organizations", "{{organization_id}}", "users"]
            }
          }
        }
      ]
    },
    {
      "name": "Organization Limits",
      "item": [
        {
          "name": "Create Organization with Custom Limits",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Organization created successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.environment.set('limited_org_id', jsonData.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Limited Startup\",\n  \"email\": \"contact@limitedstartup.com\",\n  \"contactNumber\": \"+1-555-999-1234\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/organizations",
              "host": ["{{base_url}}"],
              "path": ["organizations"]
            }
          }
        },
        {
          "name": "Test User Limit - Add Multiple Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This collection item demonstrates adding users up to the limit",
                  "pm.test('Status code is 201 or 400', function () {",
                  "    pm.expect([201, 400]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 400) {",
                  "    pm.test('User limit exceeded message', function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.message).to.include('limit');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{super_owner_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"limituser1\",\n  \"email\": \"user1@limitedstartup.com\",\n  \"password\": \"UserPassword123!\",\n  \"fullName\": \"Limit User 1\",\n  \"role\": \"AGENT\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/organizations/{{limited_org_id}}/users",
              "host": ["{{base_url}}"],
              "path": ["organizations", "{{limited_org_id}}", "users"]
            }
          }
        }
      ]
    },
    {
      "name": "Admin Functions",
      "item": [
        {
          "name": "Get All Organizations (Admin View)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('organizations');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('limit');",
                  "    pm.expect(jsonData).to.have.property('offset');",
                  "});",
                  "",
                  "pm.test('Organizations array is present', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.organizations).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{super_owner_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/organizations/admin?limit=10&offset=0",
              "host": ["{{base_url}}"],
              "path": ["organizations", "admin"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          }
        },
        {
          "name": "Search Organizations by Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results contain expected organization', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.organizations.length > 0) {",
                  "        var foundTech = jsonData.organizations.some(org => org.name.includes('Tech'));",
                  "        pm.expect(foundTech).to.be.true;",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{super_owner_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/organizations/admin?name=Tech",
              "host": ["{{base_url}}"],
              "path": ["organizations", "admin"],
              "query": [
                {
                  "key": "name",
                  "value": "Tech"
                }
              ]
            }
          }
        },
        {
          "name": "Search Organizations by Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results filtered by email', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.organizations.length > 0) {",
                  "        var foundEmail = jsonData.organizations.some(org => org.email.includes('techsolutions'));",
                  "        pm.expect(foundEmail).to.be.true;",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{super_owner_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/organizations/admin?email=techsolutions",
              "host": ["{{base_url}}"],
              "path": ["organizations", "admin"],
              "query": [
                {
                  "key": "email",
                  "value": "techsolutions"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Subdomain Context",
      "item": [
        {
          "name": "Get Organizations with Subdomain Header",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Organizations returned with subdomain context', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Organization-Subdomain",
                "value": "techsolutions"
              }
            ],
            "url": {
              "raw": "{{base_url}}/organizations",
              "host": ["{{base_url}}"],
              "path": ["organizations"]
            }
          }
        },
        {
          "name": "Create Organization with Subdomain Context",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Organization created with subdomain context', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name', 'Subdomain Test Org');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Organization-Subdomain",
                "value": "subdomaintest"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Subdomain Test Org\",\n  \"email\": \"test@subdomaintest.com\",\n  \"contactNumber\": \"+1-555-888-7777\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/organizations",
              "host": ["{{base_url}}"],
              "path": ["organizations"]
            }
          }
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Create Organization - Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message contains validation details', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.error).to.equal('Bad Request');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"A\",\n  \"email\": \"invalid-email\",\n  \"contactNumber\": \"123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/organizations",
              "host": ["{{base_url}}"],
              "path": ["organizations"]
            }
          }
        },
        {
          "name": "Get Organization - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message indicates not found', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.equal('Not Found');",
                  "    pm.expect(jsonData.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/organizations/12345678-1234-1234-1234-123456789012",
              "host": ["{{base_url}}"],
              "path": ["organizations", "12345678-1234-1234-1234-123456789012"]
            }
          }
        },
        {
          "name": "Create Organization - Duplicate Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 409', function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test('Error message indicates conflict', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.equal('Conflict');",
                  "    pm.expect(jsonData.message).to.include('already exists');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Duplicate Email Org\",\n  \"email\": \"contact@techsolutions.com\",\n  \"contactNumber\": \"+1-555-111-2222\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/organizations",
              "host": ["{{base_url}}"],
              "path": ["organizations"]
            }
          }
        },
        {
          "name": "Access Admin Endpoint - Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401 or 403', function () {",
                  "    pm.expect([401, 403]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Error indicates unauthorized access', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(['Unauthorized', 'Forbidden']).to.include(jsonData.error);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/organizations/admin",
              "host": ["{{base_url}}"],
              "path": ["organizations", "admin"]
            }
          }
        }
      ]
    },
    {
      "name": "Data Cleanup",
      "item": [
        {
          "name": "Delete Test Organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Organization deleted successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.equal(pm.environment.get('organization_id'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/organizations/{{organization_id}}",
              "host": ["{{base_url}}"],
              "path": ["organizations", "{{organization_id}}"]
            }
          }
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Clear environment variables",
                  "pm.environment.unset('jwt_token');",
                  "pm.environment.unset('super_owner_token');",
                  "pm.environment.unset('owner_token');",
                  "pm.environment.unset('admin_token');",
                  "pm.environment.unset('agent_token');",
                  "pm.environment.unset('organization_id');",
                  "pm.environment.unset('user_id');",
                  "pm.environment.unset('limited_org_id');",
                  "pm.environment.unset('storage_file_id');",
                  "pm.environment.unset('audio_job_id');",
                  "pm.environment.unset('audio_file_id');",
                  "pm.environment.unset('presigned_url');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["auth", "logout"]
            }
          }
        }
      ]
    },
    {
      "name": "Storage",
      "item": [
        {
          "name": "Upload File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has file data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData).to.have.property('url');",
                  "    pm.environment.set('storage_file_id', jsonData.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/storage/upload",
              "host": ["{{base_url}}"],
              "path": ["storage", "upload"]
            }
          }
        },
        {
          "name": "List Files",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/storage",
              "host": ["{{base_url}}"],
              "path": ["storage"]
            }
          }
        },
        {
          "name": "Get File by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has file data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/storage/{{storage_file_id}}",
              "host": ["{{base_url}}"],
              "path": ["storage", "{{storage_file_id}}"]
            }
          }
        },
        {
          "name": "Update File Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('File metadata updated', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"filename\": \"updated-filename.mp3\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/storage/{{storage_file_id}}",
              "host": ["{{base_url}}"],
              "path": ["storage", "{{storage_file_id}}"]
            }
          }
        },
        {
          "name": "Get Presigned URL",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has presigned URL', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('url');",
                  "    pm.environment.set('presigned_url', jsonData.url);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/storage/{{storage_file_id}}/presigned-url",
              "host": ["{{base_url}}"],
              "path": ["storage", "{{storage_file_id}}", "presigned-url"]
            }
          }
        },
        {
          "name": "Get Storage Stats",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has stats', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('totalFiles');",
                  "    pm.expect(jsonData).to.have.property('totalSize');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/storage/stats",
              "host": ["{{base_url}}"],
              "path": ["storage", "stats"]
            }
          }
        },
        {
          "name": "Delete File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('File deleted successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.equal(pm.environment.get('storage_file_id'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/storage/{{storage_file_id}}",
              "host": ["{{base_url}}"],
              "path": ["storage", "{{storage_file_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Audio Analysis",
      "item": [
        {
          "name": "Upload Audio for Analysis",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has job data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('jobId');",
                  "    pm.expect(jsonData).to.have.property('storageId');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.environment.set('audio_job_id', jsonData.jobId);",
                  "    pm.environment.set('audio_file_id', jsonData.storageId);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/audio-analysis/upload",
              "host": ["{{base_url}}"],
              "path": ["audio-analysis", "upload"]
            }
          }
        },
        {
          "name": "Get Job Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has job status', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('jobId');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('createdAt');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/audio-analysis/job/{{audio_job_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["audio-analysis", "job", "{{audio_job_id}}", "status"]
            }
          }
        },
        {
          "name": "Get Analysis Results",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has analysis results', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('jobId');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    if (jsonData.status === 'COMPLETED') {",
                  "        pm.expect(jsonData).to.have.property('results');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/audio-analysis/job/{{audio_job_id}}/results",
              "host": ["{{base_url}}"],
              "path": ["audio-analysis", "job", "{{audio_job_id}}", "results"]
            }
          }
        }
      ]
    },
    {
      "name": "Audio Analysis Webhook",
      "item": [
        {
          "name": "Process Webhook",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success message', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jobId\": \"{{audio_job_id}}\",\n  \"status\": \"COMPLETED\",\n  \"results\": {\n    \"transcript\": \"Sample transcript from webhook\",\n    \"sentiment\": \"positive\",\n    \"confidence\": 0.95\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/audio-analysis/webhook",
              "host": ["{{base_url}}"],
              "path": ["audio-analysis", "webhook"]
            }
          }
        }
      ]
    },
    {
      "name": "User",
      "item": [
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/user/profile",
              "host": ["{{base_url}}"],
              "path": ["user", "profile"]
            }
          }
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/user/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["user", "{{user_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Health",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has health status', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.equal('ok');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          }
        }
      ]
    },
    {
      "name": "App",
      "item": [
        {
          "name": "Hello World",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has hello message', function () {",
                  "    var responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('Hello');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            }
          }
        }
      ]
    }
  ]
}