// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
    output   = "../generated/prisma"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id @default(uuid())
  username        String    @unique
  email           String    @unique
  password        String
  fullName        String
  organizationId  String
  role            UserRole
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  failedAttempts  Int       @default(0)
  lockedUntil     DateTime?
  lastFailedLogin DateTime?

  organization    Organization @relation(fields: [organizationId], references: [id])

  @@index([username])
  @@index([email])
  @@index([organizationId])
}

model Organization {
  id                String    @id @default(uuid())
  name              String
  contactNumber     String
  email             String    @unique
  totalMemberCount  Int       @default(0)
  maxUsers          Int       @default(10)
  maxConcurrentJobs Int       @default(5)
  archivedAt        DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  users             User[]
  storage           Storage[]
  jobs              Job[]
  analysisResults   AnalysisResult[]
}

model Storage {
  id             String   @id @default(uuid())
  url            String
  filename       String
  size           Int
  mimetype       String
  organizationId String
  timestamp      DateTime @default(now())
  
  organization   Organization @relation(fields: [organizationId], references: [id])
  jobs           Job[]

  @@index([organizationId])
}

enum JobStatus {
  pending
  processing
  completed
  failed
}

enum UserRole {
  SUPER_OWNER
  OWNER
  ADMIN
  AGENT
}

model Job {
  id             String    @id @default(uuid())
  status         JobStatus @default(pending)
  fileId         String
  organizationId String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  startedAt      DateTime?
  completedAt    DateTime?
  error          String?
  
  storage        Storage   @relation(fields: [fileId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  results        AnalysisResult[]

  @@index([organizationId])
  @@index([organizationId, status])
}

model AnalysisResult {
  id             String   @id @default(uuid())
  jobId          String
  organizationId String
  transcript     String
  sentiment      String
  metadata       Json?
  createdAt      DateTime @default(now())
  
  job            Job      @relation(fields: [jobId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([organizationId, jobId])
} 